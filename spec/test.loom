require "loomext/all"

desc "Reports `uptime` status"
pattern :uptime do |loom, facts|
  loom << :uptime
  loom << "echo out to stderr 1>&2"

  loom.local << :hostname
end

desc "Prints all known facts"
pattern :facts do |loom, facts|
  puts facts
end

desc "cd's to the /etc directory and runs `pwd`"
pattern :cd do |loom, facts|
  loom.cd "/etc" do
    loom << :pwd
  end
end

desc "Always fails with an error message."
pattern :fail do |loom, facts|
  unless loom << :false
    loom << "echo i am false"
  end
end


module Test

  module Parent
    include Loom::Pattern

    with_facts :outer_fact => :outer, :replaced => :original

    before do
      puts "Test::Parent => before"
    end

    after do
      puts "Test::Parent => after"
    end

    desc "Checks facts on a parent pattern"
    pattern :check_facts do |loom, facts|
      unless facts[:outer_fact] == :outer
        raise "expected outer fact => #{facts[:outer_fact]}"
      end
    end

    module Child
      include Loom::Pattern

      with_facts :inner_fact => :inner, :replaced => :override

      before do
        puts "Test::Parent::Child => before"
      end

      after do
        puts "Test::Parent::Child => after"
      end

      desc "Checks inherited facts on a cihld pattern"
      pattern :check_facts do |loom, facts|
        unless facts[:inner_fact] == :inner
          raise "expected inner fact => #{facts[:inner_fact]}"
        end
        unless facts[:outer_fact] == :outer
          raise "expected outer fact => #{facts[:outer_fact]}"
        end
        unless facts[:replaced] == :override
          raise "expected replaced fact => #{facts[:replaced_fact]}"
        end
      end
    end
  end

  module Shell
    include Loom::Pattern

    desc "Executes some commands in a subshell"
    pattern :subshell do |loom, facts|
      loom << "(echo $$; echo $BASHPID; whoami)"
      loom << "(sudo -i -u root whoami)"

      loom.local << "(echo $$; echo $BASHPID; whoami)"
      #    loom.local << "(sudo -i -u root whoami)"
    end

    desc "Tests a bunch of nested sudo scenarios"
    pattern :sudo do |loom, facts|
      loom.sudo "root" do
        loom << "pwd"
        loom << :whoami
        loom << "touch loom.file"

        loom.sudo do
          loom << :whoami
          loom << "pwd"
          loom << "touch root.file"

          loom.user.add_system_user :postgres, uid: 999
          loom.sudo :postgres do
            loom << :whoami
            loom << "cd /tmp; touch postgres.file"
          end
          loom.user.remove :postgres

          loom << "touch root.file2"
        end
      end

      loom.cd "/tmp" do
        loom << :pwd
        loom.sudo :root, :pwd do loom << :pwd end
        loom << :pwd
      end

    end
  end

  module User
    include Loom::Pattern

    desc "Adds a bunch of users and then removes them right away"
    pattern :add_users do |loom, facts|
      loom.sudo do
        loom.user.add :nara, uid: 1001, home_dir: "/home/nara"
        loom.user.add :marrian, home_dir: "/home/marrian"

        loom.user.add_system_user :app, uid: 900
        loom.user.add_system_user :batch

        loom.user.remove :nara
        loom.user.remove :marrian
        loom.user.remove :app
        loom.user.remove :batch
      end
    end

    desc "Makes the postgres user a sudoer"
    pattern :sudoers do |loom, facts|
      loom.sudo do
        loom.user.add_system_user :postgres, uid: 999
        loom.user.make_sudoer :postgres
        loom.user.remove :postgres
      end
    end
  end

  module Package
    include Loom::Pattern

    namespace :pkg

    before do |loom, facts|
      puts "#{self} in before"
    end

    after do
      puts "#{self} in after"
    end

    desc "Updates the default package manager cache"
    pattern :update_cache do |loom, facts|
      loom.sudo { loom.pkg.update_cache }
    end

    desc "Installs Apache HTTP server"
    pattern :install_httpd do |loom, facts|
      loom.sudo do
        loom.pkg.install 'apache2' unless loom.pkg.installed? 'apache2'
      end
    end

    desc "Installs Facter GEM"
    pattern :install_facter do |loom, facts|
      loom.sudo do
        loom.pkg[:gem].ensure_installed :facter
      end
    end
  end
end
