#!/usr/bin/env ruby
if __FILE__ == $0
  # for local development, when running bin/loom directly
  $: << 'lib'
end

require 'commander'
require 'loom'

Loom.configure do |c|
  c.log_level = :info
end

module Loom
  class Cli
    include Commander::Methods

    def run
      program :name, "Loom - Weaving through infrastructure"
      program :version , Loom::VERSION
      program :description, <<EOS
A lightweight infrastructure managment tool designed to manage hosts
through SSH, loosely inspired by Python Fabric - http://www.fabfile.org/.

Try `loom weave uptime -H localhost` to see an example.
EOS

      global_option "--[no-]verbose", "Enable verbose loom result reporting" do |v|
        Loom.configure do |c|
          c.run_verbose = v
        end
      end

      global_option "-d", "Enable loom debug logging, implies --verbose" do |d|
        Loom.configure do |c|
          c.log_level = :debug
          c.run_verbose = true
        end
      end

      global_option "--dbg [N]", Integer,
                    "Enable deep debug logging, where N is 0-6, implies --verbose" do |n|
        raise "N must be greater than 0" if n < 0
        Loom.configure do |c|
          c.log_level = n * -1
          c.run_verbose = true
        end
      end

      global_option "-l", "--loom-files file1,f2,f3", Array,
                    "Load loom files from FILES instead of from the search path." do |files|
        Loom.configure { |c| c.loom_files = files }
      end

      global_option "-a", "--all-hosts",
                    "Adds all known hostnames to the active inventory, " +
                    "can be combined with -H for additional hosts" do |flag|
        Loom.configure { |c| c.inventory_all_hosts = flag }
      end

      global_option "-H", "--hosts host1,h2,h3", Array,
                    "Adds HOSTS to the active inventory" do |hosts|
        Loom.configure { |c| c.inventory_hosts = hosts }
      end

      global_option "-G", "--groups group1,g2,g3", Array,
                    "Adds hostnames in GROUPS to the active inventory" do |groups|
        Loom.configure { |c| c.inventory_groups = groups }
      end

      default_command :weave

      command :"weave" do |c|
        c.syntax = "loom weave [pattern...] [options]"
        c.description = "Applies the patterns to the active host inventory. " +
                        "This is the default."

        c.option "-n", "--dry-run",
                 "Don't run the patterns, only connect and log the expected patterns"
        c.action do |patterns, options|
          runner = Loom::Runner.new Loom.config, patterns
          runner.run options.dry_run
        end
      end
      alias_command :"w", :"weave"

      command :"mods" do |c|
        c.syntax = "loom mods [mod]"
        c.description = "Prints the list of registered mods."

        c.action do |mods, options|
          puts "Loom mods are:"
          puts ""

          loader = Loom::Pattern::Loader.configure Loom.config
          Loom::Mods::ModLoader.registered_mods.each do |name, aliases|
            puts aliases.join(", ")
            puts "\t#{name}"
          end
        end
      end

      command :"patterns" do |c|
        c.syntax = "loom patterns [pattern]"
        c.description = "Prints the list of known patterns."

        c.action do |patterns, options|
          puts "Loom patterns are:"
          puts ""
          loader = Loom::Pattern::Loader.configure Loom.config

          pattern_refs = loader.loaded_patterns
          max_slug_len = pattern_refs.map(&:slug).map(&:size).reduce(0) { |*args| args.max }
          puts "\t" + "Pattern:".ljust(max_slug_len) + "\tSource:"
          loader.loaded_patterns.each do |ref|
            puts "\t#{ref.slug.ljust(max_slug_len)}\t#{ref.source_file}"
          end
        end
      end
      alias_command :"p", :"patterns"

      command :facts do |c|
        c.syntax = "loom facts"
        c.description = "Prints the set of facts for the active inventory."

        c.action do |arg, options|
          inventory = Loom::Inventory::InventoryList.active_inventory Loom.config
          fact_providers = Loom::Facts.fact_providers Loom.config
          inventory.hosts.each do |host_spec|
            puts "Facts for host: [#{host_spec.hostname}]"
            puts Loom::Facts.fact_set(host_spec, fact_providers).facts.to_yaml
          end
        end
      end
      alias_command :f, :facts

      command :"config" do |c|
        c.syntax = "loom config [options]"
        c.description = "Print the config."
        c.action do
          puts Loom.config.to_yaml
        end
      end
      alias_command :"c", :"config"

      command :"inventory" do |c|
        c.syntax = "loom inventory [options]"
        c.description = "List all hosts in the inventory."

        c.option "--active", <<EOS
Restricts to the hosts in the active inventory, useful to check which
hosts will be targeted with the config. Using with the -a flag is
equivalent to omitting --active.
EOS

        c.action do |arg, options|
          inventory = if options.active
                        Loom::Inventory::InventoryList.active_inventory Loom.config
                      else
                        Loom::Inventory::InventoryList.total_inventory Loom.config
                      end
          puts inventory.hostnames.sort.to_yaml
        end
      end
      alias_command :"i", :"inventory"

      run!
    end
  end
end

Loom::Cli.new.run
