#!/usr/bin/env ruby
if __FILE__ == $0
  # for local development, when running bin/loom directly
  $: << 'lib'
end

require 'commander'
require 'loom'

Loom.configure do |c|
  c.log_level = :info
end

module Loom
  class Cli
    include Commander::Methods

    def run
      program :name, "Loom - Weaving through infrastructure"
      program :version , Loom::VERSION
      program :description, <<EOS
A lightweight infrastructure managment tool for managing hosts through SSH,
inspired by [Python Fabric](http://www.fabfile.org/) with thanks and nods
[Capistrano](https://capistranorb.com/).

Try `loom weave uptime -H localhost` to see an example.

Want to know how loom works? @see lib/loom/pattern/dsl.rb
EOS

      global_option "-V", "--verbose", "Report verbose results" do |v|
        Loom.configure do |c|
          c.run_verbose = v
        end
      end

      global_option "-d", "Enable loom debug logging, implies --verbose" do |d|
        Loom.configure do |c|
          c.log_level = :debug
          c.run_verbose = true
        end
      end

      global_option("--dbg [N]", Integer, <<EOS
Enables deep debug logging, where N is 1-6, implies --verbose. The difference
between -d and --dbg is the former is intended for site.loom authors and the
latter for authors looking to inspect loom internals.
EOS
        ) do |n|
        raise "N must be greater than 0" if n < 0
        Loom.configure do |c|
          c.log_level = n * -1
          c.run_verbose = true
        end
      end

      global_option "-l", "--loom-files file1,f2,f3", Array,
                    "Load loom files from FILES instead of from the search path." do |files|
        Loom.configure { |c| c.loom_files = files }
      end

      global_option "-a", "--all-hosts",
                    "Adds all known hostnames to the active inventory, " +
                    "can be combined with -H for additional hosts" do |flag|
        Loom.configure { |c| c.inventory_all_hosts = flag }
      end

      global_option "-H", "--hosts host1,h2,h3", Array,
                    "Adds HOSTS to the active inventory" do |hosts|
        Loom.configure { |c| c.inventory_hosts = hosts }
      end

      global_option "-G", "--groups group1,g2,g3", Array,
                    "Adds hostnames in GROUPS to the active inventory" do |groups|
        Loom.configure { |c| c.inventory_groups = groups }
      end

      global_option "-X", "--custom-config KEY=VAL", String do |config_value|
        key, val, *_rest = config_value.split "="
        Loom.configure do |c|
          c[key.to_sym] = val
        end
      end

      default_command :weave

      command :"weave" do |c|
        c.syntax = "loom weave [pattern...] [options]"
        c.description = "Applies the patterns to the active host inventory. " +
                        "This is the default."

        c.option "-A", "--all",
                 "Run all loaded the patterns"
        c.option "-n", "--dry-run",
                 "Don't run the patterns, only connect and log the expected patterns"
        c.option "-F", "--fact F1=V1[,F2=V2,F3=V3]]]", "add custom fact"

        c.action do |patterns, options|
          if options.all
            patterns = Loom::Pattern::Loader.load(Loom.config).slugs
          end

          other_facts = {}
          if options.fact
            fact_pairs = options.fact.split ","
            fact_pairs.each do |pair|
              key, val = pair.split "="
              other_facts[key.to_sym] = val
            end
          end

          runner = Loom::Runner.new Loom.config, patterns, other_facts
          runner.run options.dry_run
        end
      end
      alias_command :"w", :"weave"

      command :"mods" do |c|
        c.syntax = "loom mods [mod]"
        c.description = "Prints the list of registered mods."

        c.action do |mods, options|
          puts "Loom mods are:"
          puts ""

          # TODO: I think this is broken... fix this.
          Loom::Mods::ModLoader.registered_mods.each do |name, aliases|
            puts aliases.join(", ")
            puts "\t#{name}"
          end
        end
      end
      alias_command :"m", "mods"

      command :"patterns" do |c|
        c.syntax = "loom patterns [pattern]"
        c.description = "Prints the list of known patterns."

        c.option "--print", "Only print the space separted pattern names."
        c.action do |patterns, options|
          pattern_loader = Loom::Pattern::Loader.load Loom.config
          pattern_slugs = pattern_loader.slugs
          if options.print
            puts pattern_slugs.join " "
            return
          end

          puts "Loom patterns are:"
          puts ""

          max_slug_len = pattern_slugs.map(&:size).reduce(0) { |*args| args.max }
          pattern_loader.patterns.each do |ref|
            puts "\t#{ref.slug.ljust(max_slug_len)}\t#{ref.desc}"
          end
        end
      end
      alias_command :"p", :"patterns"

      command :"config" do |c|
        c.syntax = "loom config [options]"
        c.description = "Print the config."
        c.action do
          puts Loom.config.to_yaml
        end
      end
      alias_command :"c", :"config"

      command :"inventory" do |c|
        c.syntax = "loom inventory [options]"
        c.description = "List all hosts in the inventory."

        c.option "--active", <<EOS
Restricts to the hosts in the active inventory, useful to check which
hosts will be targeted with the config. Using with the -a flag is
equivalent to omitting --active.
EOS

        c.action do |arg, options|
          inventory = if options.active
                        Loom::Inventory::InventoryList.active_inventory Loom.config
                      else
                        Loom::Inventory::InventoryList.total_inventory Loom.config
                      end
          puts inventory.hostnames.sort.to_yaml
        end
      end
      alias_command :"i", :"inventory"

      run!
    end
  end
end

Loom::Cli.new.run
