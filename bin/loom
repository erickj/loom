#!/usr/bin/env ruby
$: << 'lib'

require 'commander'
require 'loom'

Loom.configure do |c|
  c.log_level = :info
end

module Loom
  class Cli
    include Commander::Methods

    def run
      program :name, "Loom - Weaving through infrastructure"
      program :version , Loom::VERSION
      program :description, <<EOS
A lightweight infrastructure managment tool designed to manage hosts
through SSH, loosely inspired by Python Fabric - http://www.fabfile.org/.

Try `loom weave uptime -H localhost` to see an example.
EOS

      global_option "-d", "Enable loom verbose logging" do
        Loom.configure { |c| c.log_level = :debug }
      end

      global_option "--dbg [N]", Integer,
                    "Enable very verbose debug logging." do |level|
        raise "level must be greater than 0" if level < 0
        Loom.configure { |c| c.log_level = level * -1 }
      end

      global_option "-l", "--loom-files FILES", Array,
                    "Load loom files from FILES instead of #{Loom.config.loom_files}" do |files|
        Loom.configure { |c| c.loom_files = files }
      end

      global_option "-a", "--all-hosts",
                    "Adds all known hostnames to the active inventory, " +
                    "can be combined with -H for additional hosts" do |flag|
        Loom.configure { |c| c.inventory_all_hosts = flag }
      end

      global_option "-H", "--hosts host1,h2,h3", Array,
                    "Adds HOSTS to the active inventory" do |hosts|
        Loom.configure { |c| c.inventory_hosts = hosts }
      end

      global_option "-G", "--groups group1,g2,g3", Array,
                    "Adds hostnames in GROUPS to the active inventory" do |groups|
        Loom.configure { |c| c.inventory_groups = groups }
      end

      global_option "-p", "--ssh-port PORT", Integer,
                     "Overrides standard SSH port 22, this can also be set per host" do |p|
        Loom.configure { |c| c.loom_ssh_port = p }
      end

      global_option "-u", "--ssh-user USER", String,
                     "Overrides the standard SSH user, #{Loom.config.loom_ssh_user}, " +
                     "this can also be set per host as part of the host string" do |u|
        Loom.configure do |c|
          puts 'in user'
          c.loom_ssh_user = u
        end
      end

      default_command :weave

      command :"weave" do |c|
        c.syntax = "loom weave [pattern...] [options]"
        c.description = "Applies the patterns to the active host inventory. " +
                        "This is the default."

        c.option "-n", "--dry-run",
                 "Don't run the patterns, only connect and log the expected patterns"
        c.option "-P", "--list-patterns",
                 "List all known patterns, ignores all other arguments"

        c.action do |patterns, options|
          if options.list_patterns
            puts "Loaded Patterns:"
            loader = Loom::Pattern::Loader.configure Loom.config
            puts loader.loaded_patterns.to_yaml
          else
            runner = Loom::Runner.new Loom.config, patterns
            runner.run options.dry_run
          end

        end
      end
      alias_command :"w", :"weave"

      command :"config" do |c|
        c.syntax = "loom config [options]"
        c.description = "Print the config."
        c.action do
          puts Loom.config.to_yaml
        end
      end
      alias_command :"c", :"config"

      command :"inventory" do |c|
        c.syntax = "loom inventory [options]"
        c.description = "List all hosts in the inventory."

        c.option "--active", <<EOS
Restricts to the hosts in the active inventory, useful to check which
hosts will be targeted with the config. Using with the -a flag is
equivalent to omitting --active.
EOS

        c.action do |arg, options|
          inventory = if options.active
                        Loom::Inventory::InventoryList.active_inventory Loom.config
                      else
                        Loom::Inventory::InventoryList.total_inventory Loom.config
                      end
          puts inventory.hostnames.sort.to_yaml
        end
      end
      alias_command :"i", :"inventory"

      run!
    end
  end
end

Loom::Cli.new.run if $0 == __FILE__
