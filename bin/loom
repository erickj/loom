#!/usr/bin/env ruby
$: << 'lib'

require 'sshkit'
require 'commander'

require 'loom'
require 'coremods/all'

Loom.configure do |c|
  c.log_level = :info
end

module Loom
  class Cli
    include Commander::Methods

    def run
      program :name, "Loom"
      program :version , Loom::VERSION
      program :description, "Weaving through infrastructure."

      global_option "-d", "Enable loom debug logging" do |debug|
        Loom.configure do |c|
          c.log_level = :debug if debug
        end
      end

      global_option "-l", "--loom-files FILES", Array,
                    "Load loom files from FILES instead of #{Loom.config.loom_files}" do |files|
        Loom.configure do |c|
          c.loom_files = files
        end
      end

      global_option "-H", "--hosts HOSTS", Array, "Hostnames to apply patterns to" do |h|
        Loom.configure do |c|
          c.loom_hosts = h
        end
      end

      global_option "-G", "--groups GROUPS", Array, "Groups to apply patterns to" do |g|
        Loom.configure do |c|
          c.loom_host_groups = g
        end
      end

      global_option "-p", "--ssh-port PORT", Integer,
                     "Overrides standard SSH port 22, this can also be set per host" do |p|
        Loom.configure do |c|
          puts 'in port'
          c.loom_ssh_port = p
        end
      end

      global_option "-u", "--ssh-user USER", String,
                     "Override the standard SSH user, #{Loom.config.loom_ssh_user}, " +
                     "this can also be set per host" do |u|
        Loom.configure do |c|
          puts 'in user'
          c.loom_ssh_user = u
        end
      end

      command :"do" do |c|
        c.syntax = "loom do pattern... [options]"
        c.description = "Applies the patterns."
        c.action do |*args|
          puts "start do"
          puts args.inspect
          puts "end do"
        end
      end

      command :"config" do |c|
        c.syntax = "loom config [options]"
        c.description = "Print the config."
        c.action do
          puts Loom.config.to_yaml
        end
      end

      command :"list hosts" do |c|
        c.syntax = "loom list hosts [options]"
        c.description = "List all hosts in the inventory."
        c.action do |arg, options|
          inventory = Loom::Inventory.total_inventory
          puts "Hosts:"
          puts inventory.hostnames.to_yaml
          puts
          puts "Groups:"
          puts inventory.group_names.to_yaml
        end
      end

      command :"patterns" do |c|
        c.syntax = "loom patterns [options]"
        c.description = "Lists all known patterns."
        c.action do
          Loom::Pattern.pattern_slugs.each do |p|
            puts p
          end
        end
      end

      # Patterns.pattern_methods.each do |p|
      #   command "pattern #{p}" do |c|
      #     c.syntax = "loom pattern #{p} [options]"
      #     c.action do
      #       Patterns.instance_method(p).bind(Object.new).call :a, :b, :c
      #     end
      #   end
      # end

      run!
    end

    module Patterns
      class << self
        def load_site
          module_eval File.read("site.loom")
          true
        end
      end

      load_site
    end
  end
end

if $0 == __FILE__
  Loom::Cli.new.run
end
